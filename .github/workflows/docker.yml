# Назначение файла: CI для проверки Docker и сборки образов
# Модули: создание .env из Repository secrets, docker compose config и build
name: 'Docker'
on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']
jobs:
  build:
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: admin
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh -u admin -p admin --authenticationDatabase admin --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3

      - name: Создание .env
        env:
          BOT_TOKEN_SECRET: ${{ secrets.BOT_TOKEN }}
          CHAT_ID_SECRET: ${{ secrets.CHAT_ID }}
          JWT_SECRET_SECRET: ${{ secrets.JWT_SECRET }}
          MONGO_URL_SECRET: ${{ secrets.MONGO_DATABASE_URL }}
          APP_URL_OVERRIDE: ${{ vars.CI_APP_URL }}
        run: |
          set -euo pipefail
          cp .env.example .env

          BOT_TOKEN_VALUE="${BOT_TOKEN_SECRET:-000000:TEST}"
          CHAT_ID_VALUE="${CHAT_ID_SECRET:-0}"
          JWT_SECRET_VALUE="${JWT_SECRET_SECRET:-development-jwt-secret}"
          APP_URL_VALUE="${APP_URL_OVERRIDE:-http://localhost:3000}"
          MONGO_URL_VALUE="${MONGO_URL_SECRET:-mongodb://admin:admin@127.0.0.1:27017/ermdb?authSource=admin}"

          if [ -z "$BOT_TOKEN_SECRET" ]; then
            echo "⚠️ BOT_TOKEN не передан из секретов, используем тестовое значение" >&2
          fi
          if [ -z "$CHAT_ID_SECRET" ]; then
            echo "⚠️ CHAT_ID не передан из секретов, используем 0" >&2
          fi
          if [ -z "$JWT_SECRET_SECRET" ]; then
            echo "⚠️ JWT_SECRET не передан из секретов, используем development-jwt-secret" >&2
          fi
          if [ -z "$MONGO_URL_SECRET" ]; then
            echo "⚠️ MONGO_DATABASE_URL не передан из секретов, подключаемся к локальной MongoDB" >&2
          fi

          cat <<EOF >> .env
          BOT_TOKEN=$BOT_TOKEN_VALUE
          CHAT_ID=$CHAT_ID_VALUE
          JWT_SECRET=$JWT_SECRET_VALUE
          APP_URL=$APP_URL_VALUE
          MONGO_DATABASE_URL=$MONGO_URL_VALUE
          EOF

      - name: Вывод MONGO_DATABASE_URL без пароля
        run: |
          url=$(grep '^MONGO_DATABASE_URL=' .env | cut -d '=' -f2-)
          if [[ $url =~ ^mongodb(\+srv)?:\/\/[^:]+:[^@]+@ ]]; then
            sanitized=$(echo "$url" | sed -E 's/^(mongodb(\+srv)?:\/\/[^:]+):[^@]*(@.*)/\1\3/')
            echo "Отфильтрованный URL: $sanitized"
          else
            echo "Неверный формат MONGO_DATABASE_URL" >&2
            exit 1
          fi

      - name: Проверка переменных MONGO_DATABASE_URL и APP_URL
        run: |
          grep -E '^MONGO_DATABASE_URL|^APP_URL' .env \
            | sed -E 's#(mongodb(\+srv)?://[^:]+):[^@]+@#\1:***@#'

      - name: Установка зависимостей
        run: ./scripts/install_bot_deps.sh

      - name: Запуск линтера
        run: pnpm lint

      - name: Тесты
        run: pnpm --dir apps/api test

      - name: Проверка MongoDB
        run: pnpm --dir apps/api run check:mongo

      - name: Проверка docker-compose.yml
        run: docker compose config
      - name: Сборка образов
        run: docker compose build
      - name: Удаление .env
        run: rm .env
